{"version":3,"sources":["components/Card.js","components/Game.js","App.js","serviceWorker.js","index.js"],"names":["Card","className","this","props","hand1","hand2","Component","Game","suffleCrads","state","length","randIndex","Math","floor","random","randPack1","splice","push","i","j","temp","show","flag","type","onChange","e","setState","name","target","value","placeholder","onClick","alert","gameCounter","packLen","pcCounter","youCounter","shift","curCount","curValue","lose","wins","gameCrads","defaultProps","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.670bb26e.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport './Card.css'\r\nexport default class Card extends Component {\r\n\r\n    render() {\r\n        \r\n        \r\n        return (\r\n            <div className='card'>\r\n                <h1 className='cardOne'>{this.props.hand1}</h1>\r\n                <br/>               \r\n                <h1 className='cardTwo'>{this.props.hand2}</h1>\r\n                \r\n             \r\n            \r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport Card from './Card'\r\nimport './Game.css'\r\n\r\n\r\n\r\nexport default class Game extends Component {\r\n    static defaultProps = {\r\n        gameCrads: [1, 1, 1, 1,\r\n            2, 2, 2, 2,\r\n            3, 3, 3, 3,\r\n            4, 4, 4, 4,\r\n            5, 5, 5, 5,\r\n            6, 6, 6, 6,\r\n            7, 7, 7, 7,\r\n            8, 8, 8, 8,\r\n            9, 9, 9, 9,\r\n            10, 10, 10, 10,\r\n            11, 11, 11, 11,\r\n            12, 12, 12, 12,\r\n            13, 13, 13, 13],\r\n        packLen: 26\r\n    }\r\n\r\n\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            hand1: [],\r\n            hand2: [...this.props.gameCrads],\r\n            pcCounter: 0,\r\n            youCounter: 0,\r\n            gameCounter: 0,\r\n            flag: false,\r\n            name: '',\r\n            wins: 0,\r\n            lose: 0,\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n    suffleCrads = () => {\r\n        while (this.state.hand1.length < this.state.hand2.length) {\r\n            let randIndex = Math.floor(Math.random() * this.state.hand2.length);\r\n            let randPack1 = this.state.hand2.splice(randIndex, 1)[0];\r\n            this.state.hand1.push(randPack1)\r\n\r\n\r\n        }\r\n        for (let i = this.state.hand2.length - 1; i > 0; i--) {\r\n            let j = Math.floor(Math.random() * (i + 1));\r\n            let temp = this.state.hand2[i];\r\n            this.state.hand2[i] = this.state.hand2[j];\r\n            this.state.hand2[j] = temp;\r\n        }\r\n    }\r\n    show = () => {\r\n        const validText = () => { this.state.name <= 0 ? alert('Error') : this.setState({ flag: true }) }\r\n        const startGame = () => { validText(); this.suffleCrads() }\r\n        if (this.state.flag === false) {\r\n            return (<div className='homepage'>\r\n                <h1>Ready for War</h1>\r\n                <input type='text' onChange={(e) => this.setState({ name: e.target.value })} placeholder='Enter your name'></input>\r\n                <br />\r\n                <button onClick={startGame}>Start Game</button>\r\n            </div>\r\n            )\r\n        } else {\r\n            const newWar = () => {\r\n                this.state.hand1.shift()\r\n                this.state.hand2.shift()\r\n                this.setState({ hand1: this.state.hand1, hand2: this.state.hand2 })\r\n            }\r\n\r\n            const counters = () => {\r\n                if (this.state.hand1[0] >= this.state.hand2[0]) {\r\n                    this.setState(curCount => ({\r\n                        pcCounter: curCount.pcCounter + 1\r\n                    }))\r\n                } else {\r\n                    this.setState(curCount => ({\r\n                        youCounter: curCount.youCounter + 1\r\n                    }))\r\n                }\r\n                this.setState(curValue => ({\r\n                    gameCounter: curValue.gameCounter + 1\r\n                }))\r\n            }\r\n\r\n            const isWinner = () => {\r\n                if (this.state.pcCounter > this.state.youCounter) {\r\n                       this.setState({ lose: this.state.lose + 1 })\r\n                } else {\r\n                    this.setState({ wins: this.state.wins + 1 })                \r\n            }\r\n            }\r\n        \r\n        \r\n\r\n        const flagChange = () => {\r\n            this.setState({ flag: false })\r\n        }\r\n        const countersSet = () => {\r\n            this.setState({\r\n                hand2: [...this.props.gameCrads],\r\n                pcCounter: 0,\r\n                youCounter: 0,\r\n                gameCounter: 0,\r\n            })\r\n        }\r\n        const handleClick2 = () => {\r\n            flagChange()\r\n            countersSet()\r\n            this.suffleCrads()\r\n\r\n        }\r\n\r\n        const handleClick = () => {\r\n\r\n            newWar();\r\n            counters();\r\n            isWinner();\r\n        }\r\n        if (this.state.gameCounter < this.props.packLen) {\r\n            return (\r\n                <div className='Gamepage'>\r\n                    <div className='Computer'><h1>Computer</h1></div>\r\n                    <Card hand1={this.state.hand1[0]} pcCounter={this.state.pcCounter} hand2={this.state.hand2[0]} youCounter={this.state.youCounter} />\r\n                    <button onClick={handleClick} className='next'>Next</button>\r\n                    <h1 className='You'>You</h1>\r\n\r\n                </div>\r\n            )\r\n        } else {\r\n            return (\r\n                <div className='Gameover'>\r\n                    <h1 className='winLose'>Lose/Wins</h1>\r\n                    <p>{this.state.wins} / {this.state.lose}</p>\r\n                    <button onClick={handleClick2} className='againBtn'>Again?</button>\r\n\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\n\r\nrender() {\r\n    return (\r\n        <div>\r\n            {this.show()}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React from 'react';\nimport './App.css';\nimport Game from './components/Game';\nimport {HashRouter as Router, Switch, Route, Link} from 'react-router-dom'\n\nfunction App() {\n \n  return (\n    <div className=\"App\">\n      <Game/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}